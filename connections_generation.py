import pickle
import numpy as np


def current_cond_dists() -> np.array:
    A1 = pickle.loads(b'\x80\x02cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02c_codecs\nencode\nq\x03X\x01\x00\x00\x00bq\x04X\x06\x00\x00\x00latin1q\x05\x86q\x06Rq\x07\x87q\x08Rq\t(K\x01K\x0bK\x0b\x86q\ncnumpy\ndtype\nq\x0bX\x02\x00\x00\x00f8q\x0cK\x00K\x01\x87q\rRq\x0e(K\x03X\x01\x00\x00\x00<q\x0fNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x10b\x89h\x03X\xf8\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82I?\xc3\xa1\x0c\x08%w\xc2\x8av?\xc3\x81x+\xc3\xbb\x1cRs?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\xc3\x81x+\xc3\xbb\x1cRc?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82I?\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\x19\xc2\x80?\x12\xc3\xab\xc3\x92c\xc3\xbe^\xc2\x8b?\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\x19\xc2\x90?\xc3\x81x+\xc3\xbb\x1cR\xc2\x83?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82y?\xc3\x81x+\xc3\xbb\x1cRc?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82I?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xa1\x0c\x08%w\xc2\x8av?\x12\xc3\xab\xc3\x92c\xc3\xbe^\xc2\x8b?\xc2\xb1.=\xc3\xa6\xc3\xaf\xc2\xb5\xc2\x91?\x1a\x10J\xc3\xae\x14-\xc2\x9c?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\xc2\x99?\xc3\x91\xc3\x82\x19\x10J\xc3\xae\xc2\x84?\xc3\x81x+\xc3\xbb\x1cR\xc2\x83?\xc3\x81x+\xc3\xbb\x1cRc?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82Y?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82I?\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x81x+\xc3\xbb\x1cRs?\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\x19\xc2\x90?\x1a\x10J\xc3\xae\x14-\xc2\x9c?\x1a\x10J\xc3\xae\x14-\xc2\xac?\xc3\x81x+\xc3\xbb\x1cR\xc2\xa3?\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\x19\xc2\xa0?\xc3\xba{m\xc3\x84\xc2\xba\xc3\xb4\xc2\x98?\xc2\xb1.=\xc3\xa6\xc3\xaf\xc2\xb5\xc2\x81?\xc2\xb1.=\xc3\xa6\xc3\xaf\xc2\xb5\xc2\x81?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\xc3\x81x+\xc3\xbb\x1cR\xc2\x83?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\xc2\x99?\xc3\x81x+\xc3\xbb\x1cR\xc2\xa3?\xc2\xb1.=\xc3\xa6\xc3\xaf\xc2\xb5\xc2\xa1?*Z8\x03B\xc3\x89\xc2\x9d?\xc3\x91\xc3\x82\x19\x10J\xc3\xae\xc2\x94?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82y?\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\x19p?\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x81x+\xc3\xbb\x1cRc?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82y?\xc3\x91\xc3\x82\x19\x10J\xc3\xae\xc2\x84?\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\x19\xc2\xa0?*Z8\x03B\xc3\x89\xc2\x9d?\xc2\xb1.=\xc3\xa6\xc3\xaf\xc2\xb5\xc2\xa1?%w\xc2\x8a\x16\xc3\x8e\xc2\x80\xc2\xa0?\xc3\x81x+\xc3\xbb\x1cR\xc2\x83?"5\xc3\x81x+\xc3\xbb\xc2\x8c?\xc3\x81x+\xc3\xbb\x1cRs?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x81x+\xc3\xbb\x1cRc?\xc3\x81x+\xc3\xbb\x1cR\xc2\x83?\xc3\xba{m\xc3\x84\xc2\xba\xc3\xb4\xc2\x98?\xc3\x91\xc3\x82\x19\x10J\xc3\xae\xc2\x94?%w\xc2\x8a\x16\xc3\x8e\xc2\x80\xc2\xa0?\xc3\x81x+\xc3\xbb\x1cR\xc2\x93?"5\xc3\x81x+\xc3\xbb|?\xc3\xa1\x0c\x08%w\xc2\x8a\xc2\x86?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82y?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82I?\xc3\x81x+\xc3\xbb\x1cRc?\xc2\xb1.=\xc3\xa6\xc3\xaf\xc2\xb5\xc2\x81?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\xc3\x81x+\xc3\xbb\x1cR\xc2\x83?"5\xc3\x81x+\xc3\xbb|?\xc3\x81x+\xc3\xbb\x1cR\xc2\x83?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82Y?\xc2\xb1.=\xc3\xa6\xc3\xaf\xc2\xb5\xc2\x81?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82y?"5\xc3\x81x+\xc3\xbb\xc2\x8c?\xc3\xa1\x0c\x08%w\xc2\x8a\xc2\x86?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82Y?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82I?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82\x19p?\xc3\x81x+\xc3\xbb\x1cRs?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82y?\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82i?\x02\xc2\xa1\xc3\xa4N\xc3\x91\xc3\x82Y?q\x11h\x05\x86q\x12Rq\x13tq\x14b.')
    A2 = pickle.loads(b'\x80\x02cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02c_codecs\nencode\nq\x03X\x01\x00\x00\x00bq\x04X\x06\x00\x00\x00latin1q\x05\x86q\x06Rq\x07\x87q\x08Rq\t(K\x01K\rK\r\x86q\ncnumpy\ndtype\nq\x0bX\x02\x00\x00\x00f8q\x0cK\x00K\x01\x87q\rRq\x0e(K\x03X\x01\x00\x00\x00<q\x0fNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x10b\x89h\x03X\xb4\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?\xc3\xace{\xc3\x8a2Ek?W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?W\x1e\xc3\x89n\xc3\xb5\xc3\x90u?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?<\xc2\xb0\xc2\xb5\xc3\x85\x04.\xc2\x87?\xc2\xb7\xc2\x89TxQ\xc3\xbf}?!B\xc2\xa2\x1c\x14\xc2\x8bx?\xc2\x8c\xc3\xba\xc3\xaf\xc3\x80\xc3\x96\x16s?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\xc3\xace{\xc3\x8a2Ek?\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x91?<\xc2\xb0\xc2\xb5\xc3\x85\x04.\xc2\x97?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x95?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?W\x1e\xc3\x89n\xc3\xb5\xc3\x90u?W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?<\xc2\xb0\xc2\xb5\xc3\x85\x04.\xc2\x87?<\xc2\xb0\xc2\xb5\xc3\x85\x04.\xc2\x97?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\xa1?\xc3\xba\x1c\x05\x1f\xc2\xab\xc2\x96\xc2\x9a?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x98?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x95?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?W\x1e\xc3\x89n\xc3\xb5\xc3\x90e?W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xace{\xc3\x8a2Ek?\xc2\xb7\xc2\x89TxQ\xc3\xbf}?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x95?\xc3\xba\x1c\x05\x1f\xc2\xab\xc2\x96\xc2\x9a?\x07\xc3\x94\xc2\x8es#\xc3\xa8\xc2\x99?\xc3\xba\x1c\x05\x1f\xc2\xab\xc2\x96\xc2\x9a?\x14\xc2\x8b\x18\xc3\x88\xc2\x9b9\xc2\x99?q\xc2\x8c\xc3\x9c\x17\xc3\xa6s\xc2\x84?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?!B\xc2\xa2\x1c\x14\xc2\x8bx?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x98?\xc3\xba\x1c\x05\x1f\xc2\xab\xc2\x96\xc2\x9a?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x91?\xc2\x99\xc2\xb1y\x15Oh\xc2\x92?q\xc2\x8c\xc3\x9c\x17\xc3\xa6s\xc2\x84?\x07\xc3\x94\xc2\x8es#\xc3\xa8\xc2\x89?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x8c\xc3\xba\xc3\xaf\xc3\x80\xc3\x96\x16s?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x95?\x14\xc2\x8b\x18\xc3\x88\xc2\x9b9\xc2\x99?\xc2\x99\xc2\xb1y\x15Oh\xc2\x92?\xc2\x8c\xc3\xba\xc3\xaf\xc3\x80\xc3\x96\x16\xc2\xa3?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x95?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x85?W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\p?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?q\xc2\x8c\xc3\x9c\x17\xc3\xa6s\xc2\x84?q\xc2\x8c\xc3\x9c\x17\xc3\xa6s\xc2\x84?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x95?\xc2\xb7\xc2\x89TxQ\xc3\xbf\xc2\x8d?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?\xc3\xace{\xc3\x8a2Ek?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xace{\xc3\x8a2Ek?W\x1e\xc3\x89n\xc3\xb5\xc3\x90u?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x81?\x07\xc3\x94\xc2\x8es#\xc3\xa8\xc2\x89?W\x1e\xc3\x89n\xc3\xb5\xc3\x90\xc2\x85?!B\xc2\xa2\x1c\x14\xc2\x8b\xc2\x88?\xc2\xa6h\x03j\xc3\x87\xc2\xb9\xc2\x91?W\x1e\xc3\x89n\xc3\xb5\xc3\x90e?W\x1e\xc3\x89n\xc3\xb5\xc3\x90u?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?W\x1e\xc3\x89n\xc3\xb5\xc3\x90e?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?W\x1e\xc3\x89n\xc3\xb5\xc3\x90E?\xc3\xace{\xc3\x8a2Ek?W\x1e\xc3\x89n\xc3\xb5\xc3\x90e?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?W\x1e\xc3\x89n\xc3\xb5\xc3\x90U?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\p?\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\`?W\x1e\xc3\x89n\xc3\xb5\xc3\x90u?\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x81\xc3\x96\x16\x13\xc2\xb8\\p?q\x11h\x05\x86q\x12Rq\x13tq\x14b.')
    A3 = pickle.loads(b'\x80\x02cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02c_codecs\nencode\nq\x03X\x01\x00\x00\x00bq\x04X\x06\x00\x00\x00latin1q\x05\x86q\x06Rq\x07\x87q\x08Rq\t(K\x01K\x11K\x11\x86q\ncnumpy\ndtype\nq\x0bX\x02\x00\x00\x00f8q\x0cK\x00K\x01\x87q\rRq\x0e(K\x03X\x01\x00\x00\x00<q\x0fNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x10b\x89h\x03X\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zT?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zT?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?\xc2\x9a\xc2\x99\xc2\x99\xc2\x99\xc2\x99\xc2\x99i?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zT?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\x00\x00\x00\x00\x00\x00\x00\x00\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?{\x14\xc2\xaeG\xc3\xa1zt?\n\xc3\x97\xc2\xa3p=\nw?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xabq?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zT?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zT?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?)\\\xc2\x8f\xc3\x82\xc3\xb5(\xc2\x8c?)\\\xc2\x8f\xc3\x82\xc3\xb5(\xc2\x8c?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x88?333333\xc2\x93?\n\xc3\x97\xc2\xa3p=\nw?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xab\xc2\x81?)\\\xc2\x8f\xc3\x82\xc3\xb5(|?333333\xc2\x83?\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\xc2\x9a\xc2\x99\xc2\x99\xc2\x99\xc2\x99\xc2\x99i?{\x14\xc2\xaeG\xc3\xa1zt?)\\\xc2\x8f\xc3\x82\xc3\xb5(\xc2\x8c?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xab\xc2\x81?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8\xc2\x8e?\xc2\x8f\xc3\x82\xc3\xb5(\\\xc2\x8f\xc2\x92?)\\\xc2\x8f\xc3\x82\xc3\xb5(|?\xc2\xa4p=\n\xc3\x97\xc2\xa3\xc2\x80?\xc2\xa4p=\n\xc3\x97\xc2\xa3\xc2\x80?\n\xc3\x97\xc2\xa3p=\nw?{\x14\xc2\xaeG\xc3\xa1zD?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?\n\xc3\x97\xc2\xa3p=\nw?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x88?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8\xc2\x8e?)\\\xc2\x8f\xc3\x82\xc3\xb5(\xc2\x8c?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x98?\n\xc3\x97\xc2\xa3p=\nw?\xc3\xa1z\x14\xc2\xaeG\xc3\xa1\xc2\x8a?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8~?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x88?{\x14\xc2\xaeG\xc3\xa1zT?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zD?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zT?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8n?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xabq?333333\xc2\x93?\xc2\x8f\xc3\x82\xc3\xb5(\\\xc2\x8f\xc2\x92?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x98?\xc2\xa4p=\n\xc3\x97\xc2\xa3\xc2\xa0?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xab\xc2\x81?\xc2\xaeG\xc3\xa1z\x14\xc2\xae\xc2\x97?\x1f\xc2\x85\xc3\xabQ\xc2\xb8\x1e\xc2\x95?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8\xc2\x8e?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xabq?\n\xc3\x97\xc2\xa3p=\nw?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\xc2\x9a\xc2\x99\xc2\x99\xc2\x99\xc2\x99\xc2\x99i?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zT?\n\xc3\x97\xc2\xa3p=\nw?)\\\xc2\x8f\xc3\x82\xc3\xb5(|?\n\xc3\x97\xc2\xa3p=\nw?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xab\xc2\x81?{\x14\xc2\xaeG\xc3\xa1zt?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x88?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xab\xc2\x81?\n\xc3\x97\xc2\xa3p=\nw?{\x14\xc2\xaeG\xc3\xa1zT?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zT?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xab\xc2\x81?\xc2\xa4p=\n\xc3\x97\xc2\xa3\xc2\x80?\xc3\xa1z\x14\xc2\xaeG\xc3\xa1\xc2\x8a?\xc2\xaeG\xc3\xa1z\x14\xc2\xae\xc2\x97?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x88?{\x14\xc2\xaeG\xc3\xa1z\xc2\x94?333333\xc2\x93?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8\xc2\x8e?{\x14\xc2\xaeG\xc3\xa1zd?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xabq?{\x14\xc2\xaeG\xc3\xa1zd?{\x14\xc2\xaeG\xc3\xa1zT?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?)\\\xc2\x8f\xc3\x82\xc3\xb5(|?\xc2\xa4p=\n\xc3\x97\xc2\xa3\xc2\x80?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8~?\x1f\xc2\x85\xc3\xabQ\xc2\xb8\x1e\xc2\x95?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xab\xc2\x81?333333\xc2\x93?{\x14\xc2\xaeG\xc3\xa1z\xc2\x84?)\\\xc2\x8f\xc3\x82\xc3\xb5(\xc2\x8c?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zT?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zT?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zT?333333\xc2\x83?\n\xc3\x97\xc2\xa3p=\nw?R\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\x88?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8\xc2\x8e?\n\xc3\x97\xc2\xa3p=\nw?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8\xc2\x8e?)\\\xc2\x8f\xc3\x82\xc3\xb5(\xc2\x8c?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8\xc2\x8e?{\x14\xc2\xaeG\xc3\xa1zd?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zT?\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xabq?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zd?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zd?\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\n\xc3\x97\xc2\xa3p=\nw?\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xacQ\xc2\xb8\x1e\xc2\x85\xc3\xabq?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zD?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zd?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zD?\xc2\xb8\x1e\xc2\x85\xc3\xabQ\xc2\xb8^?\xc2\x9a\xc2\x99\xc2\x99\xc2\x99\xc2\x99\xc2\x99i?{\x14\xc2\xaeG\xc3\xa1zD?{\x14\xc2\xaeG\xc3\xa1zT?{\x14\xc2\xaeG\xc3\xa1zT?\x00\x00\x00\x00\x00\x00\x00\x00{\x14\xc2\xaeG\xc3\xa1zD?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\x11h\x05\x86q\x12Rq\x13tq\x14b.')

    raw_dists = [A1, A2, A3]
    n_dists = len(raw_dists)
    largest = raw_dists[-1]

    # pad them to reach the largest size
    dists = np.zeros((n_dists, largest.shape[0], largest.shape[1]))
    for i, raw in enumerate(raw_dists):
        dists[i] = np.zeros_like(largest)
        dists[i][:raw.shape[0], :raw.shape[1]] = raw

    return dists


def normalize(p: [float]) -> [float]:
    if p is None:
        return None

    if all(np.isclose(x, p[0]) for x in p):
        return None  # they all have the same proba
    return np.array(p) / sum(p)


def generate_masks(layer_sizes: [int], dists: [[[float]]]) -> [[[bool]]]:
    """
    Args:
        layer_sizes:
        dists: a conditional distribution (matrix) for each timestep

    Returns: boolean mask
     - first index: layer number (len of layer_sizes)
     - second index: timestamp (len of dists)
     - last two indexes: according to the shapes of the layer sizes

    Notes:
        for layer_sizes = [..., 32, 24, 3]
        sometimes a neuron on the 32 layer, which previously already had 7 connects, will receive 4 more, for a total of 11
        the distribution at t1, neurons of degree 11 have zero probability of connecting to others of degree lower than 4
        but the degree of any neuron on the 24 layer is max 3
        in this case, pick random ones from the layer of 24


        additionally, sometimes there are fewer candidates with non-zero proba then there should be
        so we give all of them a chance
    """
    n_dists = len(dists)
    n_layers = len(layer_sizes)
    univar_dists = dists.sum(axis=1)  # assumes symmetry of each bivariate distribution

    placeholders = [None] * (n_layers - 1)  # each layer will have a boolean matrix
    masks = [placeholders.copy() for _ in range(n_dists)]  # each timestamp has a set of such placeholders

    """ For the first timestep, generate from scratch """
    for layer_n, curr_size in reversed(list(enumerate(layer_sizes[:-1]))):  # start assigning from output layer to input
        next_size = layer_sizes[layer_n + 1]
        masks[0][layer_n] = np.zeros((curr_size, next_size), dtype=int)

        univar_dist = dists[0].sum(axis=0)[:next_size + 1]  # can only connect to as many neurons as next layer contains

        is_connected_to_output = (layer_n == n_layers - 2)
        if not is_connected_to_output:
            next_layer_degs = masks[0][layer_n + 1].sum(axis=1)

        max_conns = min(next_size + 1,  # +1 because we can pick 0 as well
                        len(univar_dist))  # for when there are more neurons than our distribution spreads

        for neuron in range(curr_size):
            n_conns = np.random.choice(max_conns, p=normalize(univar_dist))
            if n_conns == 0:  # sampled no connections
                continue

            if is_connected_to_output:
                p = None  # output neurons have no degree so we can't differentiate them
            else:
                # for each target neuron, assign a proba based on its degree (taking into account the current neuron's degree)
                p = dists[0][n_conns][next_layer_degs]

            active_indices = np.random.choice(next_size, size=n_conns, p=normalize(p), replace=False)
            masks[0][layer_n][neuron][active_indices] = 1

    """ For all subsequent timesteps, add to the previous """
    for t in range(1, n_dists):
        # start from connectivity at previous time step, as a copy so we don't modify it
        masks[t] = [m.copy() for m in masks[t - 1]]

        for layer_n, curr_size in reversed(list(enumerate(layer_sizes[:-1]))):  # start assigning from output layer to input
            next_size = layer_sizes[layer_n + 1]

            is_connected_to_output = (layer_n == n_layers - 2)
            if not is_connected_to_output:
                next_layer_degs = masks[t][layer_n + 1].sum(axis=1)

            prev_degs = masks[t - 1][layer_n].sum(axis=1)
            for neuron, prev_deg in enumerate(prev_degs):
                # only consider increases in degree (by 0, by 1, etc), limited to a total of how many the next layer allows
                incr_proba = univar_dists[t][prev_deg:next_size + 1]
                n_conns_added = np.random.choice(len(incr_proba), p=normalize(incr_proba))
                if n_conns_added == 0:  # sampled no increase
                    continue

                prev_conns = masks[t - 1][layer_n][neuron]
                candidates, = np.where(~prev_conns.astype(bool))  # only pick out of neurons not already connected to
                if len(candidates) == 0:  # already connected to all of the next layer's neurons, can't add any more connections
                    continue

                if is_connected_to_output:
                    p = None  # output neurons have no degree so we can't differentiate them
                else:
                    new_deg = prev_deg + n_conns_added  # should never be over the maximum distribution degree
                    d = dists[t][new_deg]  # take into account the current neuron's new degree

                    # and each of the candidates' (previously account) degrees
                    candidate_degs = [next_layer_degs[c] for c in candidates]
                    p = d[candidate_degs]

                    if sum(p) > 0 and sum(p != 0) < len(candidates):  # not all zero, but not enough non-zeros
                        # give all of them a very slight chance
                        p += min(p[p != 0]) / 10

                activate_indices = np.random.choice(candidates, size=n_conns_added, p=normalize(p), replace=False)
                masks[t][layer_n][neuron][activate_indices] = 1

    rearranged = [
        np.array([masks[t][layer_number] for t in range(n_dists)])
        for layer_number in range(n_layers - 1)
    ]
    return rearranged
